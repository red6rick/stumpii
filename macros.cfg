[gcode_macro STOP_HOT]
gcode:
   G91
   G0 Z10
   G90
   G0 X150Y0
   UNLOAD_FILAMENT

[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - PLEASE CUSTOMISE THE SCRIPT
gcode:
    {% set BED = params.BED|default(100)|float %}
    {% set EXTRUDER = params.EXTRUDER|default(250)|float %}
    
    M117 Heating
#    _knob_extruder_glow    

    G90               ; absolute coordinates
                      ; makes tap easier
    M190 S{BED}       ; change bed to target temp and wait
    M109 S150         ; heat extruder to max temp for tap 

    _TRADITIONAL_HOMING

    M117 Heating extruder
    M109 S{EXTRUDER}  ; wait for extruder at final temp

#    KISS
#    KISSY
     VORON_PURGE

    M117 Printing

######################### CONDITIONAL HOMING #########################

# traditional homing calibration
[gcode_macro _TRADITIONAL_HOMING]
gcode:
    M117 Leveling
    G28               ; home
    Z_TILT_ADJUST     ; level bed
    G28               ; home again
    M117 Mesh
    bed_mesh_calibrate

# Conditional homing if not already homed
[gcode_macro _CONDITIONAL_HOMING]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        _TRADITIONAL_HOMING
    {% endif %}

[gcode_macro KISSY]
gcode:
    {% set MIN_TEMP = 180 %}
    {% set TARGET_TEMP = printer.extruder.target %}

    {%if TARGET_TEMP > MIN_TEMP %}
        M109 S{TARGET_TEMP}  ; wait for extruder at final temp    
    
       M83                ; e relative
       G1 X5 Y4 Z0.4 F10000                             # Moves to starting point
       G1 X115 E20 F1000   
       G0 Z10             ; up, and done
       M82                ; back to absolute extruder
    {% else %}
        { action_respond_info('No fire, no kiss'  % ()) }

    {% endif %}





[gcode_macro KISS]
gcode:
    {% set MIN_TEMP = 180 %}
    {% set TARGET_TEMP = printer.extruder.target %}

    {%if TARGET_TEMP > MIN_TEMP %}
        M109 S{TARGET_TEMP}  ; wait for extruder at final temp    
    
       M83                ; e relative
       G0 X0 Y0 Z2 F5000  ; front corner
       G0 E60 F300        ; push a bit
       G0 E-1             ; pull a bit
       G0 Z10 F5000       ; up
       G0 X50 Y0          ; move over
       G0 Z0              ; and down
       G0 X90             ; not quite dragging on plate
       G0 X50Y4           ; and back
       G0 Z10             ; up, and done
       M82                ; back to absolute extruder
    {% else %}
        { action_respond_info('No fire, no kiss'  % ()) }

    {% endif %}


[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-2.0 F3600                 ; retract filament
    
    TURN_OFF_HEATERS
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 10} F3600  ; park nozzle at rear
    M107                                     ; turn off fan
    
    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
    M117 Idle
	
[gcode_macro LOAD_FILAMENT]
gcode:
   M83                            ; set extruder to relative
   G1 E60 F300                    ; load
   G1 E60 F150                    ; prime nozzle with filament
   M82                            ; set extruder to absolute
    
[gcode_macro UNLOAD_FILAMENT]
gcode:
   M83                            ; set extruder to relative
   G1 E10 F300                    ; extrude a little to soften tip
   G1 E-90 F1800                  ; retract some, but not too much or it will jam
   M82                            ; set extruder to absolute


######################################################################
# safe homeing for sensorless

[gcode_macro _HOME_X]
gcode:
    # Always use consistent run_current on A/B steppers during sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.8 %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}

    # Home
    G28 X
    # Move away
    G91
    G1 X-10 F1200
    G90
    
    # Wait just a second… (give StallGuard registers time to clear)
    G4 P1000
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}
    

[gcode_macro _HOME_Y]
gcode:
    # Set current for sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.8 %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}

    # Home
    G28 Y
    # Move away
    G91
    G1 Y-10 F1200
    G90

    # Wait just a second… (give StallGuard registers time to clear)
    G4 P1000
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

[homing_override]
axes: xyz
gcode:
  {% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}

  _UNSAFE_NUDGE_Z

  {% if home_all or 'X' in params %}

    _HOME_X
  {% endif %}
  
  {% if home_all or 'Y' in params %}

    _HOME_Y
  {% endif %}
  
  {% if home_all or 'Z' in params %}
    G0 X150 Y150 F14000
    G28 Z
    G1 Z10
  {% endif %}

  
[gcode_macro _UNSAFE_NUDGE_Z]
description: Move the Z without homing
gcode:
    G90
    SET_KINEMATIC_POSITION Z=-4
    G0 Z0 F600

    

[gcode_macro Z_TILT_ADJUST]
rename_existing: BASE_Z_TILT_ADJUST
gcode:
    BASE_Z_TILT_ADJUST
    G0 X150 Y150 F14000   
    G28 Z
    G1 Z10

[gcode_macro DUMP_VARIABLES]
gcode:
    {% set filter_name = params.NAME|default('')|string|lower %}
    {% set filter_value = params.VALUE|default('')|string|lower %}
    {% set show_cfg = params.SHOW_CFG|default(0)|int %}
    
    {% set out = [] %}

    {% for key1 in printer %}
        {% for key2 in printer[key1] %}
            {% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
                {% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
            {% endif %}
        {% else %}
            {% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
                {% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
            {% endif %}
        {% endfor %}
    {% endfor %}
    
    {action_respond_info(out|join("\n"))}
